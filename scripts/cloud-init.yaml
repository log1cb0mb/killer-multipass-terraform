#cloud-config
bootcmd:
- "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -"
- "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -"
- "wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_${image}/Release.key -O- | apt-key add -"

disable_root: false
users:
  - name: root
    ssh_authorized_keys:
    - ${ssh_key}
  - name: ubuntu
    sudo: [ 'ALL=(ALL) NOPASSWD:ALL' ]
    groups: users, admin, sudo
    home: /home/ubuntu
    shell: /bin/bash
    lock_passwd: false
    ssh_authorized_keys:
    - ${ssh_key}
manage_etc_hosts: localhost
package_update: true
package_upgrade: true
# package_reboot_if_required: true
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - jq
  - lsb-release
%{~ if role == "bastion" }
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - podman
%{~ else }
  - containerd
%{~ endif }
  - kubelet=${k8s_version}-00
  - kubeadm=${k8s_version}-00
  - kubectl=${k8s_version}-00

apt:
  sources:
    docker:
      source: "deb https://download.docker.com/linux/ubuntu xenial stable"
    kubernetes:
      source: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    podman:
      source: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${image}/ /"

# Let iptables see bridged traffic
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic
write_files:
%{~ if role != "bastion" }
 - path: /etc/environment
   content: |
     LC_ALL=en_US.UTF-8
     LANG=en_US.UTF-8
     KUBECONFIG=/etc/kubernetes/admin.conf
%{ endif }

  # Set containerd as default runtime endpoint for crictl
 - path: /etc/crictl.yaml
   content: |
    runtime-endpoint: unix:///run/containerd/containerd.sock

  # Containerd
  # https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd

 - path: /etc/modules-load.d/containerd.conf
   content: |
    overlay
    br_netfilter

  # Setup required sysctl params, these persist across reboots.
 - path: /etc/sysctl.d/k8s.conf
   content: |
    net.bridge.bridge-nf-call-iptables  = 1
    net.ipv4.ip_forward                 = 1
    net.bridge.bridge-nf-call-ip6tables = 1

%{~ if role == "bastion" }
 - path: /etc/docker/daemon.json
   content: |
    {
    "exec-opts": ["native.cgroupdriver=systemd"]
    }
%{ endif }

%{~ if restore_cluster && role == "controller" }
%{~ for certs in cluster_certs ~}
 - path: /etc/kubernetes/pki/ca.crt
   content: |
     ${ indent(5, base64decode(certs.ca_cert))}

 - path: /etc/kubernetes/pki/ca.key
   content: |
     ${ indent(5, base64decode(certs.ca_key))}
%{ endfor ~}
 - path: /usr/local/bin/etcd_restore
   owner: root:root
   permissions: '0755'
   content: |
    #!/bin/bash
    main() {
      KUBE_DIR=/etc/kubernetes/
      mv $KUBE_DIR/manifests $HOME/
      sleep 20
      rm -rf /var/lib/etcd
      etcdctl snapshot restore /home/ubuntu/${cluster_name}.db \
      --cacert=/etc/kubernetes/pki/etcd/ca.crt \
      --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key \
      --data-dir /var/lib/etcd \
      --name ${hostname} \
      --initial-cluster ${hostname}=https://127.0.0.1:2380 \
      --initial-cluster-token etcd-cluster \
      --initial-advertise-peer-urls https://127.0.0.1:2380
      mv $HOME/manifests $KUBE_DIR/
      return 0
    }
    main
 - path: /etc/systemd/system/restore-etcd.service
   content: |
        [Unit]
        After=cloud-final.service
        Wants=network-online.target
        Before=systemd-user-sessions.service
        ConditionPathExists=!/var/lib/%N.stamp
        [Service]
        RemainAfterExit=yes
        Type=oneshot
        ExecStartPre=/bin/sleep 10
        ExecStartPre=tar -xf /home/ubuntu/${cluster_name}.tar.gz -C /home/ubuntu/
        ExecStart=/usr/local/bin/etcd_restore
        [Install]
        WantedBy=multi-user.target
 - path: /etc/systemd/system/restore-etcd.path
   content: |
        [Unit]
        After=cloud-final.service
        Description=Watch for etcd-db
        [Path]
        PathExists=/home/ubuntu/${cluster_name}.tar.gz
        [Install]
        WantedBy=cloud-init.target
%{ endif }
%{~ if role == "bastion" }
# create the docker group
groups:
  - docker

# Add default auto created user to docker group
system_info:
  default_user:
    groups: [docker]
%{ endif }

runcmd:
%{~ if role != "bastion" }
 - modprobe br_netfilter # Load br_netfilter module.
 - modprobe overlay
 - apt-mark hold kubelet kubeadm kubectl # pin kubelet kubeadm kubectl version
 - sysctl --system # Reload settings from all system configuration files to take iptables configuration
 - systemctl daemon-reload
 - mkdir -p /etc/containerd
 - containerd config default | sudo tee /etc/containerd/config.toml
 - systemctl restart containerd
%{~ endif }
 - wget https://github.com/derailed/k9s/releases/download/v0.25.18/k9s_Linux_arm64.tar.gz
 - tar xvf k9s_Linux_arm64.tar.gz && mv ./k9s /usr/local/bin
%{~ if role == "controller" }
 - export RELEASE=$(curl -s https://api.github.com/repos/etcd-io/etcd/releases/latest|grep tag_name | cut -d '"' -f 4)
 - wget https://github.com/etcd-io/etcd/releases/download/$${RELEASE}/etcd-$${RELEASE}-linux-arm64.tar.gz
 - tar xvf etcd-$${RELEASE}-linux-arm64.tar.gz
 - mv etcd-$${RELEASE}-linux-arm64/etcdctl /usr/local/bin
 - [ systemctl, enable, restore-etcd.path ]
 - [ systemctl, start, --no-block, restore-etcd.path ]
%{ endif ~}
